# We use this as a reverse proxy in local environments so that we don't need
# to bother negotiating what server runs on what port, CORs, etc. This way our
# local environment runs in a fashion similar to production.
server {
    listen [::]:80;
    listen 80;

    charset utf-8;

    # Disable HTTP caching across the board.
    expires -1;

    # We still run a permalinks instance locally so that we don't clutter up the production
    # database.
    location /api/permalink {
        rewrite /api/permalink(/(.*))? /$2 break;
        proxy_pass http://permalinks:8000;
        proxy_set_header X-Forwarded-For $remote_addr;
    }

    # Route all other API requests to production.
    location /api {
        proxy_pass https://demo.allennlp.org;
        proxy_set_header X-Forwarded-For $remote_addr;
    }

    # This provides a websocket connection between the client and server,
    # which allows the ui to be automatically refreshed after changes are
    # made that impact it.
    location /sockjs-node {
        proxy_pass http://ui:3000;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header X-Forwarded-For $remote_addr;
    }

    # Send everything else to the UI. In development we run a HTTP server that's provided with
    # our build tools. It rebuilds the JavaScript bundle as changes are made. In production we
    # serve the precompiled assets from disk using NGINX.
    location / {
        proxy_pass http://ui:3000;
        proxy_set_header X-Forwarded-For $remote_addr;
    }
}

