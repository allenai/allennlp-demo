#
# This cloudbuild config runs whenever we push code to master or release
# and updates the target cluster (specified via the $_CLUSTER envrionment
# variable).
#
steps:
# Build the Python API. All models (currently) run in the same image.
- id: 'pull'
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: '/bin/bash'
  args: [
    '-c',
    'docker pull gcr.io/$PROJECT_ID/$REPO_NAME:latest || exit 0'
  ]
  waitFor: [ '-' ]
- id: 'build'
  name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA',
    '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME:latest',
    '--cache-from', 'gcr.io/$PROJECT_ID/$REPO_NAME:latest',
    '.'
  ]
  waitFor: [ 'pull' ]
  dir: 'old'
- id: 'push'
  name: 'gcr.io/cloud-builders/docker'
  args: [
    'push',
    'gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA',
  ]
  waitFor: [ 'build' ]
# Generate the Kubernetes config
- id: 'config'
  name: 'gcr.io/ai2-reviz/jsonnet'
  args: [
    '-y',
    '--output-file', './webapp.yaml',
    '--ext-str', 'env=$_ENV',
    '--ext-str', 'image=gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA',
    '--ext-str', 'sha=$COMMIT_SHA',
    '--ext-str', 'buildId=$BUILD_ID',
    '--ext-str', 'repo=$REPO_NAME',
    './webapp.jsonnet'
  ]
  dir: 'old/.skiff'
  waitFor: [ '-' ]
# Deploy the image to Kubernetes
- id: 'deploy'
  name: 'gcr.io/ai2-reviz/rudder'
  args: [
    'deploy',
    '-f',
    'webapp.yaml'
  ]
  dir: 'old/.skiff'
  waitFor: [ 'push', 'config' ]
substitutions:
  _ENV: prod
images: [
  'gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA',
  'gcr.io/$PROJECT_ID/$REPO_NAME:latest',
]
artifacts:
  objects:
    location: 'gs://skiff-archive/$REPO_NAME/$_ENV/$COMMIT_SHA/$BUILD_ID'
    paths: [ 'old/.skiff/webapp.yaml' ]
timeout: 1800s
