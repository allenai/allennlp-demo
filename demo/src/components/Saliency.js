import React from 'react'
import colormap from 'colormap'
import { Tooltip, ColorizedToken } from './Shared';
import {
  AccordionItem,
  AccordionItemTitle,
  AccordionItemBody,
  } from 'react-accessible-accordion';
import {
  GRAD_INTERPRETER,
  IG_INTERPRETER,
  SG_INTERPRETER
  } from './InterpretConstants';

export const getHeaders = (interpreter) => {
  let title = ''
  let description = ''
  if (interpreter === GRAD_INTERPRETER){
      title = 'Simple Gradients Visualization'
      description = <p> See saliency map interpretations generated by <a href="https://arxiv.org/abs/1312.6034" target="_blank" rel="noopener noreferrer">visualizing the gradient</a>. </p>
    }
    else if (interpreter === IG_INTERPRETER){
      title = 'Integrated Gradients Visualization'
      description = <p> See saliency map interpretations generated using <a href="https://arxiv.org/abs/1703.01365" target="_blank" rel="noopener noreferrer">Integrated Gradients</a>.</p>
    }
    else if (interpreter === SG_INTERPRETER){
      title = 'SmoothGrad Visualization'
      description = <p> See saliency map interpretations generated using <a href="https://arxiv.org/abs/1706.03825" target="_blank" rel="noopener noreferrer">SmoothGrad</a>.</p>
    }
  return [title, description]
}


const getTokenWeightPairs = (grads, tokens) => {
  return tokens.map((token, idx) => {
    let weight = grads[idx]
    // We do 1 - weight because the colormap is inverted
    return { token, weight: 1 - weight }
  })
}

export class SaliencyComponent extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      topK: {all: 3}, // 3 words are highlighted by default
    }

    this.colorize = this.colorize.bind(this)
    this.handleInputTopKChange = this.handleInputTopKChange.bind(this)
    this.getTopKIndices = this.getTopKIndices.bind(this)
  }

  static defaultProps = {
    colormapProps: {
      colormap: 'copper',
      format: 'hex',
      nshades: 20
    }
  }

  colorize(tokensWithWeights, topKIdx) {
    const {colormapProps} = this.props
    // colormap package takes minimum of 6 shades
    colormapProps.nshades =  Math.min(Math.max(colormapProps.nshades, 6), 72);
    const colors = colormap(colormapProps)

    let colorized_string = [];
    tokensWithWeights.forEach((obj, idx) => {
      colorized_string.push(
        // Again, 1 -, in this case because low extreme is blue and high extreme is red
        <label key={idx} data-tip={(1 - obj.weight).toFixed(3)} style={{ display: "inline-block" }} >
            <ColorizedToken backgroundColor={topKIdx.has(idx) ? colors[Math.round(obj.weight * (colormapProps.nshades - 1))] : 'transparent'} key={idx}>
                {obj.token}
            </ColorizedToken>
        </label>
      )
    })
    return colorized_string
  }

  // when the user changes the slider for input 1, update how many tokens are highlighted
  handleInputTopKChange = input_index => e => {
    let stateUpdate = Object.assign({}, this.state)
    if (e.target.value.trim() === "") {
      stateUpdate['topK'][input_index] = e.target.value
    } else {
      stateUpdate['topK'][input_index] = parseInt(e.target.value, 10)
    }
    this.setState(stateUpdate)
  }

  // Extract top K tokens by saliency value and return only the indices of the top tokens
  getTopKIndices(tokensWithWeights, input_index) {
    function grad_compare(obj1, obj2) {
      return obj1.weight - obj2.weight
    }

    // Add indices so we can keep track after sorting
    let indexedTokens = tokensWithWeights.map((obj, idx) => Object.assign({}, obj, {idx}))
    indexedTokens.sort(grad_compare)

    const k = input_index in this.state.topK ? this.state.topK[input_index] : this.state.topK.all
    const topKTokens = indexedTokens.slice(0, k)
    return topKTokens.map(obj => obj.idx)
  }

  render() {
    const { interpretData, inputTokens, inputHeaders, interpretModel, requestData, interpreter } = this.props
    const [title, description] = getHeaders(interpreter)

    const run_button = <button
                         type="button"
                         className="btn"
                         style={{margin: "30px 0px"}}
                         onClick={() => interpretModel(requestData, interpreter)}
                        >
                          Interpret Prediction
                       </button>

    var display_text = '';
    if (interpretData === undefined) {
      display_text = <div><p style={{color: "#7c7c7c"}}>Press "interpret prediction" to show the interpretation.</p>{run_button}</div>
    } else {
      const saliency_maps = [];
      for (var i = 0; i < inputTokens.length; i++) {
        console.log(interpretData);
        console.log(inputTokens);
        console.log(inputHeaders);
        const grads = interpretData[i];
        const tokens = inputTokens[i];
        const header = inputHeaders[i];
        const tokenWeights = getTokenWeightPairs(grads, tokens);
        // indices with the top gradient values
        const topKIdx = new Set(this.getTopKIndices(tokenWeights, i))
        // the tokens highlighted based on their top values
        const colorMap = this.colorize(tokenWeights, topKIdx)
        const k = i in this.state.topK ? this.state.topK[i] : this.state.topK.all
        const saliency_map = (
          <div>
            {header}
            {colorMap}
            <Tooltip /> <input type="range" min={0} max={colorMap.length} step="1" value={k} className="slider" onChange={this.handleInputTopKChange(i)} style={{ padding: "0px", margin: "10px 0px" }} />
            <br/>
            <span style={{ color: "#72BCFF" }}>Visualizing the top {k} words.</span>
            <br />
            <br />
          </div>
        )
        saliency_maps.push(saliency_map);
      }
      display_text = <div>{saliency_maps}</div>
    }

    return (
          <AccordionItem>
            <AccordionItemTitle>
                {title}
                <div className="accordion__arrow" role="presentation"/>
            </AccordionItemTitle>
            <AccordionItemBody>
                <div className="content">
                    {description}
                </div>
                {display_text}
            </AccordionItemBody>
          </AccordionItem>
    )
  }
}

export default SaliencyComponent
